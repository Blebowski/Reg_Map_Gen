{'ports': [{'entry_type': 'section', 'comment': 'Clock and Asynchronous Reset'}, {'entry_type': 'port', 'name': 'clk_sys', 'type': 'std_logic', 'comment': 'System clock', 'direction': 'in'}, {'entry_type': 'port', 'name': 'res_n', 'type': 'std_logic', 'comment': 'Asynchronous reset', 'direction': 'in'}, {'entry_type': 'section', 'comment': 'Signals which cause state change'}, {'entry_type': 'port', 'name': 'rx_trigger', 'type': 'std_logic', 'comment': 'RX Trigger', 'direction': 'in'}, {'entry_type': 'port', 'name': 'err_frm_req', 'type': 'std_logic', 'comment': 'Error frame request', 'direction': 'in'}, {'entry_type': 'section', 'comment': 'Memory registers interface'}, {'entry_type': 'port', 'name': 'drv_ena', 'type': 'std_logic', 'comment': 'CTU CAN FD is enabled', 'direction': 'in'}, {'entry_type': 'port', 'name': 'drv_fd_type', 'type': 'std_logic', 'comment': 'CAN FD type (ISO / NON-ISO)', 'direction': 'in'}, {'entry_type': 'port', 'name': 'drv_bus_off_reset', 'type': 'std_logic', 'comment': 'Command to start re-integration in Bus-off', 'direction': 'in'}, {'entry_type': 'port', 'name': 'drv_ack_forb', 'type': 'std_logic', 'comment': 'Forbidding acknowledge mode', 'direction': 'in'}, {'entry_type': 'port', 'name': 'drv_self_test_ena', 'type': 'std_logic', 'comment': 'Self Test Mode enabled', 'direction': 'in'}, {'entry_type': 'port', 'name': 'drv_bus_mon_ena', 'type': 'std_logic', 'comment': 'Bus Monitoring mode enabled', 'direction': 'in'}, {'entry_type': 'port', 'name': 'drv_retr_lim_ena', 'type': 'std_logic', 'comment': 'Retransmition limit enabled for errornous frames', 'direction': 'in'}, {'entry_type': 'port', 'name': 'drv_int_loopback_ena', 'type': 'std_logic', 'comment': 'Internal Loopback enabled', 'direction': 'in'}, {'entry_type': 'port', 'name': 'drv_can_fd_ena', 'type': 'std_logic', 'comment': 'Reception of CAN FD Frames is enabled', 'direction': 'in'}, {'entry_type': 'port', 'name': 'drv_ssp_delay_select', 'type': 'std_logic_vector (1 downto 0)', 'comment': 'Secondary sampling point delay select', 'direction': 'in'}, {'entry_type': 'port', 'name': 'drv_pex', 'type': 'std_logic', 'comment': 'Protocol exception handling', 'direction': 'in'}, {'entry_type': 'port', 'name': 'drv_cpexs', 'type': 'std_logic', 'comment': 'Protocol exception status clear', 'direction': 'in'}, {'entry_type': 'port', 'name': 'drv_rom_ena', 'type': 'std_logic', 'comment': 'ROM mode enabled', 'direction': 'in'}, {'entry_type': 'port', 'name': 'is_control', 'type': 'std_logic', 'comment': 'Control field is being transmitted', 'direction': 'out'}, {'entry_type': 'port', 'name': 'is_data', 'type': 'std_logic', 'comment': 'Data field is being transmitted', 'direction': 'out'}, {'entry_type': 'port', 'name': 'is_stuff_count', 'type': 'std_logic', 'comment': 'Stuff Count field is being transmitted', 'direction': 'out'}, {'entry_type': 'port', 'name': 'is_crc', 'type': 'std_logic', 'comment': 'CRC field is being transmitted', 'direction': 'out'}, {'entry_type': 'port', 'name': 'is_crc_delim', 'type': 'std_logic', 'comment': 'CRC Delimiter is being transmitted', 'direction': 'out'}, {'entry_type': 'port', 'name': 'is_ack_field', 'type': 'std_logic', 'comment': 'ACK field is being transmitted', 'direction': 'out'}, {'entry_type': 'port', 'name': 'is_ack_delim', 'type': 'std_logic', 'comment': 'ACK Delimiter is being transmitted', 'direction': 'out'}, {'entry_type': 'port', 'name': 'is_eof', 'type': 'std_logic', 'comment': 'End of Frame field is being transmitted', 'direction': 'out'}, {'entry_type': 'port', 'name': 'is_intermission', 'type': 'std_logic', 'comment': 'Intermission is being transmitted', 'direction': 'out'}, {'entry_type': 'port', 'name': 'is_suspend', 'type': 'std_logic', 'comment': 'Suspend transmission is being transmitted', 'direction': 'out'}, {'entry_type': 'port', 'name': 'is_err_frm', 'type': 'std_logic', 'comment': 'Error frame is being transmitted', 'direction': 'out'}, {'entry_type': 'port', 'name': 'is_overload', 'type': 'std_logic', 'comment': 'Overload frame is being transmitted', 'direction': 'out'}, {'entry_type': 'port', 'name': 'is_sof', 'type': 'std_logic', 'comment': 'Start of Frame', 'direction': 'out'}, {'entry_type': 'port', 'name': 'is_pexs', 'type': 'std_logic', 'comment': 'Protocol exception status', 'direction': 'out'}, {'entry_type': 'section', 'comment': 'Data-path interface'}, {'entry_type': 'port', 'name': 'tx_data_wbs', 'type': 'std_logic', 'comment': 'Actual TX Data (post bit stuffing)', 'direction': 'in'}, {'entry_type': 'port', 'name': 'rx_data_nbs', 'type': 'std_logic', 'comment': 'Actual RX Data', 'direction': 'in'}, {'entry_type': 'section', 'comment': 'RX Buffer interface'}, {'entry_type': 'port', 'name': 'store_metadata', 'type': 'std_logic', 'comment': 'Command to store CAN frame metadata to RX Buffer', 'direction': 'out'}, {'entry_type': 'port', 'name': 'store_data', 'type': 'std_logic', 'comment': 'Command to store word of CAN Data', 'direction': 'out'}, {'entry_type': 'port', 'name': 'rec_valid', 'type': 'std_logic', 'comment': 'Received frame valid', 'direction': 'out'}, {'entry_type': 'port', 'name': 'rec_abort', 'type': 'std_logic', 'comment': 'Command to abort storing of RX frame (due to Error frame)', 'direction': 'out'}, {'entry_type': 'port', 'name': 'sof_pulse', 'type': 'std_logic', 'comment': 'Start of Frame pulse', 'direction': 'out'}, {'entry_type': 'section', 'comment': 'TXT Buffer, TX Arbitrator interface'}, {'entry_type': 'port', 'name': 'tran_frame_valid', 'type': 'std_logic', 'comment': 'There is a valid frame for transmission', 'direction': 'in'}, {'entry_type': 'port', 'name': 'txtb_hw_cmd', 'type': 't_txtb_hw_cmd', 'comment': 'HW Commands to TXT Buffers', 'direction': 'out'}, {'entry_type': 'port', 'name': 'txtb_ptr', 'type': 'natural range 0 to 19', 'comment': 'Pointer to TXT Buffer memory', 'direction': 'out'}, {'entry_type': 'port', 'name': 'txtb_clk_en', 'type': 'std_logic', 'comment': 'Clock enable for TXT Buffer memory', 'direction': 'out'}, {'entry_type': 'port', 'name': 'tran_dlc', 'type': 'std_logic_vector (3 downto 0)', 'comment': 'TX Data length code', 'direction': 'in'}, {'entry_type': 'port', 'name': 'tran_is_rtr', 'type': 'std_logic', 'comment': 'TX Remote transmission request flag', 'direction': 'in'}, {'entry_type': 'port', 'name': 'tran_frame_type', 'type': 'std_logic', 'comment': 'TX Frame type (0-CAN 2.0, 1-CAN FD)', 'direction': 'in'}, {'entry_type': 'port', 'name': 'tran_ident_type', 'type': 'std_logic', 'comment': 'Identifier type (BASIC, EXTENDED)', 'direction': 'in'}, {'entry_type': 'port', 'name': 'tran_brs', 'type': 'std_logic', 'comment': 'TX Bit rate shift', 'direction': 'in'}, {'entry_type': 'section', 'comment': 'TX Shift register interface'}, {'entry_type': 'port', 'name': 'tx_load_base_id', 'type': 'std_logic', 'comment': 'Load Base Identifier to TX Shift register', 'direction': 'out'}, {'entry_type': 'port', 'name': 'tx_load_ext_id', 'type': 'std_logic', 'comment': 'Load extended Identifier to TX Shift register', 'direction': 'out'}, {'entry_type': 'port', 'name': 'tx_load_dlc', 'type': 'std_logic', 'comment': 'Load DLC', 'direction': 'out'}, {'entry_type': 'port', 'name': 'tx_load_data_word', 'type': 'std_logic', 'comment': 'Load Data word to TX Shift register', 'direction': 'out'}, {'entry_type': 'port', 'name': 'tx_load_stuff_count', 'type': 'std_logic', 'comment': 'Load Stuff count', 'direction': 'out'}, {'entry_type': 'port', 'name': 'tx_load_crc', 'type': 'std_logic', 'comment': 'Load CRC to TX Shift register', 'direction': 'out'}, {'entry_type': 'port', 'name': 'tx_shift_ena', 'type': 'std_logic', 'comment': 'Shift register enable (shifts with TX Trigger)', 'direction': 'out'}, {'entry_type': 'port', 'name': 'tx_dominant', 'type': 'std_logic', 'comment': 'Force Dominant value instead of value from shift register', 'direction': 'out'}, {'entry_type': 'section', 'comment': 'RX Shift register interface'}, {'entry_type': 'port', 'name': 'rx_clear', 'type': 'std_logic', 'comment': 'Clear all registers in RX Shift register', 'direction': 'out'}, {'entry_type': 'port', 'name': 'rx_store_base_id', 'type': 'std_logic', 'comment': 'Store Base Identifier', 'direction': 'out'}, {'entry_type': 'port', 'name': 'rx_store_ext_id', 'type': 'std_logic', 'comment': 'Store Extended Identifier', 'direction': 'out'}, {'entry_type': 'port', 'name': 'rx_store_ide', 'type': 'std_logic', 'comment': 'Store Identifier extension', 'direction': 'out'}, {'entry_type': 'port', 'name': 'rx_store_rtr', 'type': 'std_logic', 'comment': 'Store Remote transmission request', 'direction': 'out'}, {'entry_type': 'port', 'name': 'rx_store_edl', 'type': 'std_logic', 'comment': 'Store EDL (FDF) bit', 'direction': 'out'}, {'entry_type': 'port', 'name': 'rx_store_dlc', 'type': 'std_logic', 'comment': 'Store DLC', 'direction': 'out'}, {'entry_type': 'port', 'name': 'rx_store_esi', 'type': 'std_logic', 'comment': 'Store ESI', 'direction': 'out'}, {'entry_type': 'port', 'name': 'rx_store_brs', 'type': 'std_logic', 'comment': 'Store BRS', 'direction': 'out'}, {'entry_type': 'port', 'name': 'rx_store_stuff_count', 'type': 'std_logic', 'comment': 'Store stuff count and Stuff Count parity', 'direction': 'out'}, {'entry_type': 'port', 'name': 'rx_shift_ena', 'type': 'std_logic_vector (3 downto 0)', 'comment': 'Clock Enable RX Shift register for each byte.', 'direction': 'out'}, {'entry_type': 'port', 'name': 'rx_shift_in_sel', 'type': 'std_logic', 'comment': 'Selector for inputs of each byte of shift register(0-Previous byte output, 1- RX Data input)', 'direction': 'out'}, {'entry_type': 'port', 'name': 'rec_is_rtr', 'type': 'std_logic', 'comment': 'RX value of Remote transmission request', 'direction': 'in'}, {'entry_type': 'port', 'name': 'rec_dlc_d', 'type': 'std_logic_vector (3 downto 0)', 'comment': 'RX value of DLC (combinational), valid only in last bit of DLC', 'direction': 'in'}, {'entry_type': 'port', 'name': 'rec_dlc_q', 'type': 'std_logic_vector (3 downto 0)', 'comment': 'RX value of DLC (captured)', 'direction': 'in'}, {'entry_type': 'port', 'name': 'rec_frame_type', 'type': 'std_logic', 'comment': 'RX frame type (0-CAN 2.0, 1- CAN FD)', 'direction': 'in'}, {'entry_type': 'section', 'comment': 'Control counter interface'}, {'entry_type': 'port', 'name': 'ctrl_ctr_pload', 'type': 'std_logic', 'comment': 'Preload control counter', 'direction': 'out'}, {'entry_type': 'port', 'name': 'ctrl_ctr_pload_val', 'type': 'std_logic_vector (8 downto 0)', 'comment': 'Control counter preload value', 'direction': 'out'}, {'entry_type': 'port', 'name': 'ctrl_ctr_ena', 'type': 'std_logic', 'comment': 'Control counter is enabled', 'direction': 'out'}, {'entry_type': 'port', 'name': 'ctrl_ctr_zero', 'type': 'std_logic', 'comment': 'Control counter is zero', 'direction': 'in'}, {'entry_type': 'port', 'name': 'ctrl_ctr_one', 'type': 'std_logic', 'comment': 'Control counter is equal to 1', 'direction': 'in'}, {'entry_type': 'port', 'name': 'ctrl_counted_byte', 'type': 'std_logic', 'comment': 'Control counter counted multiple of 8 bits', 'direction': 'in'}, {'entry_type': 'port', 'name': 'ctrl_counted_byte_index', 'type': 'std_logic_vector (1 downto 0)', 'comment': 'Control counter byte index within a memory word', 'direction': 'in'}, {'entry_type': 'port', 'name': 'ctrl_ctr_mem_index', 'type': 'std_logic_vector (4 downto 0)', 'comment': 'Control counter - TXT Buffer memory index', 'direction': 'in'}, {'entry_type': 'port', 'name': 'compl_ctr_ena', 'type': 'std_logic', 'comment': 'Complementary counter enable', 'direction': 'out'}, {'entry_type': 'port', 'name': 'alc_id_field', 'type': 'std_logic_vector (2 downto 0)', 'comment': 'Arbitration lost capture ID field', 'direction': 'out'}, {'entry_type': 'section', 'comment': 'Reintegration counter interface'}, {'entry_type': 'port', 'name': 'reinteg_ctr_clr', 'type': 'std_logic', 'comment': 'Reintegration counter Clear (synchronous)', 'direction': 'out'}, {'entry_type': 'port', 'name': 'reinteg_ctr_enable', 'type': 'std_logic', 'comment': 'Enable counting (with RX Trigger)', 'direction': 'out'}, {'entry_type': 'port', 'name': 'reinteg_ctr_expired', 'type': 'std_logic', 'comment': 'Reintegration counter expired (reached 128)', 'direction': 'in'}, {'entry_type': 'section', 'comment': 'Retransmitt counter interface'}, {'entry_type': 'port', 'name': 'retr_ctr_clear', 'type': 'std_logic', 'comment': 'Clear Retransmitt counter', 'direction': 'out'}, {'entry_type': 'port', 'name': 'retr_ctr_add', 'type': 'std_logic', 'comment': 'Increment Retransmitt counter by 1', 'direction': 'out'}, {'entry_type': 'port', 'name': 'retr_limit_reached', 'type': 'std_logic', 'comment': 'Retransmitt limit was reached', 'direction': 'in'}, {'entry_type': 'section', 'comment': 'Error detector interface'}, {'entry_type': 'port', 'name': 'form_err', 'type': 'std_logic', 'comment': 'Form Error has occurred', 'direction': 'out'}, {'entry_type': 'port', 'name': 'ack_err', 'type': 'std_logic', 'comment': 'ACK Error has occurred', 'direction': 'out'}, {'entry_type': 'port', 'name': 'crc_check', 'type': 'std_logic', 'comment': 'Perform CRC check', 'direction': 'out'}, {'entry_type': 'port', 'name': 'bit_err_arb', 'type': 'std_logic', 'comment': 'Bit Error in arbitration field', 'direction': 'out'}, {'entry_type': 'port', 'name': 'crc_match', 'type': 'std_logic', 'comment': 'Calculated CRC and Stuff count are matching received ones', 'direction': 'in'}, {'entry_type': 'port', 'name': 'crc_err', 'type': 'std_logic', 'comment': 'CRC error signalling', 'direction': 'out'}, {'entry_type': 'port', 'name': 'crc_clear_match_flag', 'type': 'std_logic', 'comment': 'Clear CRC Match flag', 'direction': 'out'}, {'entry_type': 'port', 'name': 'crc_src', 'type': 'std_logic_vector (1 downto 0)', 'comment': 'CRC Source (CRC15, CRC17, CRC21)', 'direction': 'out'}, {'entry_type': 'port', 'name': 'err_pos', 'type': 'std_logic_vector (4 downto 0)', 'comment': 'Error position field (for Error capture)', 'direction': 'out'}, {'entry_type': 'port', 'name': 'is_arbitration', 'type': 'std_logic', 'comment': 'Arbitration field is being transmitted / received', 'direction': 'out'}, {'entry_type': 'section', 'comment': 'Bit Stuffing/Destuffing control signals'}, {'entry_type': 'port', 'name': 'stuff_enable', 'type': 'std_logic', 'comment': 'Bit Stuffing is enabled', 'direction': 'out'}, {'entry_type': 'port', 'name': 'destuff_enable', 'type': 'std_logic', 'comment': 'Bit De-stuffing is enabled', 'direction': 'out'}, {'entry_type': 'port', 'name': 'stuff_length', 'type': 'std_logic_vector (2 downto 0)', 'comment': 'Length of Bit stuffing rule', 'direction': 'out'}, {'entry_type': 'port', 'name': 'fixed_stuff', 'type': 'std_logic', 'comment': 'Fixed Bit stuffing method', 'direction': 'out'}, {'entry_type': 'port', 'name': 'tx_frame_no_sof', 'type': 'std_logic', 'comment': 'Frame transmission without SOF started', 'direction': 'out'}, {'entry_type': 'section', 'comment': 'Operation control interface'}, {'entry_type': 'port', 'name': 'is_transmitter', 'type': 'std_logic', 'comment': 'Unit is transmitter', 'direction': 'in'}, {'entry_type': 'port', 'name': 'is_receiver', 'type': 'std_logic', 'comment': 'Unit is receiver', 'direction': 'in'}, {'entry_type': 'port', 'name': 'arbitration_lost', 'type': 'std_logic', 'comment': 'Loss of arbitration -> Turn receiver!', 'direction': 'out'}, {'entry_type': 'port', 'name': 'set_transmitter', 'type': 'std_logic', 'comment': 'Set unit to be transmitter (in SOF)', 'direction': 'out'}, {'entry_type': 'port', 'name': 'set_receiver', 'type': 'std_logic', 'comment': 'Set unit to be receiver', 'direction': 'out'}, {'entry_type': 'port', 'name': 'set_idle', 'type': 'std_logic', 'comment': 'Set unit to be idle', 'direction': 'out'}, {'entry_type': 'section', 'comment': 'Fault confinement interface'}, {'entry_type': 'port', 'name': 'primary_err', 'type': 'std_logic', 'comment': 'Primary Error', 'direction': 'out'}, {'entry_type': 'port', 'name': 'act_err_ovr_flag', 'type': 'std_logic', 'comment': 'Active Error or Overload flag is being tranmsmitted', 'direction': 'out'}, {'entry_type': 'port', 'name': 'set_err_active', 'type': 'std_logic', 'comment': 'Set unit to be error active', 'direction': 'out'}, {'entry_type': 'port', 'name': 'err_delim_late', 'type': 'std_logic', 'comment': 'Error delimiter too late', 'direction': 'out'}, {'entry_type': 'port', 'name': 'is_err_active', 'type': 'std_logic', 'comment': 'Unit is error active', 'direction': 'in'}, {'entry_type': 'port', 'name': 'is_err_passive', 'type': 'std_logic', 'comment': 'Unit is error passive', 'direction': 'in'}, {'entry_type': 'port', 'name': 'is_bus_off', 'type': 'std_logic', 'comment': 'Unit is Bus off', 'direction': 'in'}, {'entry_type': 'port', 'name': 'decrement_rec', 'type': 'std_logic', 'comment': 'Decrement REC (by 1)', 'direction': 'out'}, {'entry_type': 'port', 'name': 'bit_err_after_ack_err', 'type': 'std_logic', 'comment': 'Bit Error in passive error flag after ACK Error', 'direction': 'out'}, {'entry_type': 'section', 'comment': 'Other control signals'}, {'entry_type': 'port', 'name': 'sp_control', 'type': 'std_logic_vector (1 downto 0)', 'comment': 'Sample control (Nominal, Data, Secondary)', 'direction': 'out'}, {'entry_type': 'port', 'name': 'sp_control_q', 'type': 'std_logic_vector (1 downto 0)', 'comment': 'Sample control (Registered)', 'direction': 'out'}, {'entry_type': 'port', 'name': 'nbt_ctrs_en', 'type': 'std_logic', 'comment': 'Enable Nominal Bit time counters.', 'direction': 'out'}, {'entry_type': 'port', 'name': 'dbt_ctrs_en', 'type': 'std_logic', 'comment': 'Enable Data Bit time counters.', 'direction': 'out'}, {'entry_type': 'port', 'name': 'sync_control', 'type': 'std_logic_vector (1 downto 0)', 'comment': 'Synchronisation control (No synchronisation, Hard Synchronisation,Resynchronisation)', 'direction': 'out'}, {'entry_type': 'port', 'name': 'ssp_reset', 'type': 'std_logic', 'comment': 'Clear the Shift register for secondary sampling point.', 'direction': 'out'}, {'entry_type': 'port', 'name': 'tran_delay_meas', 'type': 'std_logic', 'comment': 'Enable measurement of Transmitter delay', 'direction': 'out'}, {'entry_type': 'port', 'name': 'pc_state', 'type': 't_protocol_control_state', 'comment': 'Protocol control FSM state output', 'direction': 'out'}, {'entry_type': 'port', 'name': 'tran_valid', 'type': 'std_logic', 'comment': 'Transmitted frame is valid', 'direction': 'out'}, {'entry_type': 'port', 'name': 'crc_enable', 'type': 'std_logic', 'comment': 'CRC calculation enabled', 'direction': 'out'}, {'entry_type': 'port', 'name': 'crc_spec_enable', 'type': 'std_logic', 'comment': 'CRC calculation - speculative enable', 'direction': 'out'}, {'entry_type': 'port', 'name': 'crc_calc_from_rx', 'type': 'std_logic', 'comment': 'Use RX Data for CRC calculation', 'direction': 'out'}, {'entry_type': 'port', 'name': 'load_init_vect', 'type': 'std_logic', 'comment': 'Load CRC Initialization vector', 'direction': 'out'}, {'entry_type': 'port', 'name': 'bit_err_enable', 'type': 'std_logic', 'comment': 'Bit error enable', 'direction': 'out'}, {'entry_type': 'port', 'name': 'br_shifted', 'type': 'std_logic', 'comment': 'Bit rate shifted', 'direction': 'out'}, {'entry_type': 'port', 'name': 'btmc_reset', 'type': 'std_logic', 'comment': 'Reset Bit time measurement counter', 'direction': 'out'}, {'entry_type': 'port', 'name': 'dbt_measure_start', 'type': 'std_logic', 'comment': 'Start Measurement of data bit time (in TX Trigger)', 'direction': 'out'}, {'entry_type': 'port', 'name': 'gen_first_ssp', 'type': 'std_logic', 'comment': 'First SSP generated (in ESI bit)', 'direction': 'out'}, {'entry_type': 'port', 'name': 'sync_edge', 'type': 'std_logic', 'comment': 'Synchronization edge', 'direction': 'in'}], 'generics': [{'entry_type': 'generic', 'name': 'G_RESET_POLARITY', 'type': 'std_logic', 'comment': 'Reset polarity', 'def_val': "'0'"}]}